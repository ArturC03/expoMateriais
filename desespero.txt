


Tendo em conta a pagina de dashboard, ajuda me a criar paginas e comtroladores para completar todas as funcionalidades necessárias.
```tsx expoMateriais/resources/js/pages/dashboard.tsx
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { PlaceholderPattern } from '@/components/ui/placeholder-pattern';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import AppLayout from '@/layouts/app-layout';
import { type BreadcrumbItem } from '@/types';
import { Head, Link } from '@inertiajs/react';
import { format, parseISO } from 'date-fns';
import { pt } from 'date-fns/locale';
import { CheckCircle, Clock, FileText, Package, PlusCircle, XCircle } from 'lucide-react';

interface DashboardProps {
    user: {
        name: string;
        email: string;
    };
    cargo: string | null;
    curso: string | null;
    materiais: {
        id: number;
        nome: string;
        descricao: string;
        quantidade_disponivel: number;
    }[];
    requisicoes: {
        id: number;
        material: {
            id: number;
            nome: string;
        };
        quantidade: number;
        finalidade: string;
        created_at: string;
        estado: {
            id: number;
            nome: string;
        };
        projeto: {
            id: number;
            titulo: string;
        };
    }[];
    estatisticas: {
        total: number;
        pendentes: number;
        aprovadas: number;
        rejeitadas: number;
    };
    materiaisMaisRequisitados: {
        id: number;
        nome: string;
        total: number;
    }[];
}

const breadcrumbs: BreadcrumbItem[] = [
    {
        title: 'Dashboard',
        href: '/dashboard',
    },
];

export default function Dashboard({ user, cargo, curso, materiais, requisicoes, estatisticas, materiaisMaisRequisitados }: DashboardProps) {
    const getStatusBadge = (estadoId: number, estadoNome: string) => {
        switch (estadoId) {
            case 1: // Pendente
                return (
                    <Badge variant="secondary" className="text-yellow-800 dark:text-yellow-300">
                        {estadoNome}
                    </Badge>
                );
            case 2: // Aprovado
                return (
                    <Badge variant="secondary" className="text-green-800 dark:text-green-300">
                        {estadoNome}
                    </Badge>
                );
            case 3: // Rejeitado
                return (
                    <Badge variant="secondary" className="text-red-800 dark:text-red-300">
                        {estadoNome}
                    </Badge>
                );
            default:
                return <Badge variant="outline">{estadoNome}</Badge>;
        }
    };

    const formatDate = (dateString: string) => {
        try {
            return format(parseISO(dateString), 'dd/MM/yyyy', { locale: pt });
        } catch (error) {
            return dateString;
        }
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Dashboard | ExpoMateriais" />
            <div className="flex h-full flex-1 flex-col gap-4 rounded-xl p-4">
                {/* Saudação */}
                <div className="mb-2">
                    <h1 className="text-2xl font-bold">Olá, {user.name}!</h1>
                    {curso && (
                        <p className="text-muted-foreground">
                            {cargo ? `${cargo} | ` : ''}Curso: {curso}
                        </p>
                    )}
                </div>

                {/* Status Cards */}
                <div className="grid auto-rows-min gap-4 md:grid-cols-4">
                    <Card className="flex flex-col items-center justify-center p-4">
                        <div className="mb-2 flex items-center justify-center">
                            <FileText className="h-8 w-8 text-blue-500" />
                        </div>
                        <h3 className="text-2xl font-bold">{estatisticas.total}</h3>
                        <p className="text-muted-foreground text-sm">Total de Requisições</p>
                    </Card>

                    <Card className="flex flex-col items-center justify-center p-4">
                        <div className="mb-2 flex items-center justify-center">
                            <Clock className="h-8 w-8 text-yellow-500" />
                        </div>
                        <h3 className="text-2xl font-bold">{estatisticas.pendentes}</h3>
                        <p className="text-muted-foreground text-sm">Pendentes</p>
                    </Card>

                    <Card className="flex flex-col items-center justify-center p-4">
                        <div className="mb-2 flex items-center justify-center">
                            <CheckCircle className="h-8 w-8 text-green-500" />
                        </div>
                        <h3 className="text-2xl font-bold">{estatisticas.aprovadas}</h3>
                        <p className="text-muted-foreground text-sm">Aprovadas</p>
                    </Card>

                    <Card className="flex flex-col items-center justify-center p-4">
                        <div className="mb-2 flex items-center justify-center">
                            <XCircle className="h-8 w-8 text-red-500" />
                        </div>
                        <h3 className="text-2xl font-bold">{estatisticas.rejeitadas}</h3>
                        <p className="text-muted-foreground text-sm">Rejeitadas</p>
                    </Card>
                </div>

                {/* Main Content */}
                <div className="grid gap-4 md:grid-cols-3">
                    {/* Recent Requests Table */}
                    <Card className="p-4 md:col-span-2">
                        <div className="mb-4 flex items-center justify-between">
                            <h2 className="text-xl font-semibold">Requisições Recentes</h2>
                            <Link href="/requisicoes/create">
                                <Button variant="outline" size="sm" className="flex items-center gap-1">
                                    <PlusCircle className="h-4 w-4" />
                                    Nova Requisição
                                </Button>
                            </Link>
                        </div>
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Material</TableHead>
                                    <TableHead>Qtd</TableHead>
                                    <TableHead>Finalidade</TableHead>
                                    <TableHead>Data</TableHead>
                                    <TableHead>Status</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {requisicoes.length > 0 ? (
                                    requisicoes.map((req) => (
                                        <TableRow key={req.id}>
                                            <TableCell className="font-medium">{req.material.nome}</TableCell>
                                            <TableCell>{req.quantidade}</TableCell>
                                            <TableCell>{req.finalidade}</TableCell>
                                            <TableCell>{formatDate(req.created_at)}</TableCell>
                                            <TableCell>{getStatusBadge(req.estado.id, req.estado.nome)}</TableCell>
                                        </TableRow>
                                    ))
                                ) : (
                                    <TableRow>
                                        <TableCell colSpan={5} className="text-muted-foreground py-4 text-center">
                                            Nenhuma requisição encontrada.
                                        </TableCell>
                                    </TableRow>
                                )}
                            </TableBody>
                        </Table>
                        <div className="mt-4 flex justify-end">
                            <Link href="/requisicoes">
                                <Button variant="outline" size="sm">
                                    Ver Todas
                                </Button>
                            </Link>
                        </div>
                    </Card>

                    {/* Quick Access */}
                    <Card className="flex flex-col gap-3 p-4">
                        <h2 className="text-xl font-semibold">Acesso Rápido</h2>

                        <Link href="/requisicoes/create">
                            <Button className="flex w-full justify-start gap-2">
                                <PlusCircle className="h-5 w-5" />
                                Nova Requisição
                            </Button>
                        </Link>

                        <Link href="/materiais">
                            <Button variant="outline" className="flex w-full justify-start gap-2">
                                <Package className="h-5 w-5" />
                                Materiais Disponíveis
                            </Button>
                        </Link>

                        <Link href="/requisicoes">
                            <Button variant="outline" className="flex w-full justify-start gap-2">
                                <FileText className="h-5 w-5" />
                                Minhas Requisições
                            </Button>
                        </Link>

                        <div className="mt-4">
                            <h3 className="mb-2 text-sm font-medium">Materiais Mais Solicitados</h3>
                            <div className="flex flex-wrap gap-2">
                                {materiaisMaisRequisitados.length > 0 ? (
                                    materiaisMaisRequisitados.map((mat) => (
                                        <Badge key={mat.id} variant="secondary">
                                            {mat.nome}
                                        </Badge>
                                    ))
                                ) : (
                                    <p className="text-muted-foreground text-sm">Nenhum material requisitado ainda.</p>
                                )}
                            </div>
                        </div>
                    </Card>
                </div>

                {/* Available Materials */}
                <Card className="p-4">
                    <div className="mb-4 flex items-center justify-between">
                        <h2 className="text-xl font-semibold">Materiais para Requisição</h2>
                        <Link href="/materiais">
                            <Button variant="outline" size="sm">
                                Ver Catálogo Completo
                            </Button>
                        </Link>
                    </div>
                    <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
                        {materiais.slice(0, 4).map((material) => (
                            <Card key={material.id} className="p-3">
                                <div className="relative mb-2 aspect-video overflow-hidden rounded-lg">
                                    <PlaceholderPattern className="absolute inset-0 size-full" />
                                </div>
                                <h3 className="truncate font-medium">{material.nome}</h3>
                                <p className="text-muted-foreground text-sm">Disponíveis: {material.quantidade_disponivel} unidades</p>
                                <Link href={`/requisicoes/create?material_id=${material.id}`}>
                                    <Button variant="outline" size="sm" className="mt-2 w-full">
                                        Requisitar
                                    </Button>
                                </Link>
                            </Card>
                        ))}
                        {materiais.length === 0 && (
                            <div className="text-muted-foreground col-span-4 py-8 text-center">Nenhum material disponível para requisição.</div>
                        )}
                    </div>
                </Card>
            </div>
        </AppLayout>
    );
}
```


# Sistema de Requisição de Materiais - Plano de Implementação

Baseado no dashboard apresentado, vou ajudar a criar o conjunto completo de páginas e controladores necessários para implementar as funcionalidades do sistema ExpoMateriais.

## 1. Páginas Principais Necessárias

### 1.1 Materiais (Catálogo)

```tsx
// resources/js/pages/materiais/index.tsx
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { PlaceholderPattern } from '@/components/ui/placeholder-pattern';
import AppLayout from '@/layouts/app-layout';
import { BreadcrumbItem } from '@/types';
import { Head, Link } from '@inertiajs/react';
import { Package, Search } from 'lucide-react';
import { useState } from 'react';

interface MaterialItem {
    id: number;
    nome: string;
    descricao: string;
    quantidade_disponivel: number;
    categoria: {
        id: number;
        nome: string;
    };
}

interface MateriaisIndexProps {
    materiais: MaterialItem[];
    categorias: {
        id: number;
        nome: string;
    }[];
    isAdmin: boolean;
}

const breadcrumbs: BreadcrumbItem[] = [
    {
        title: 'Dashboard',
        href: '/dashboard',
    },
    {
        title: 'Materiais',
        href: '/materiais',
    },
];

export default function MateriaisIndex({ materiais, categorias, isAdmin }: MateriaisIndexProps) {
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedCategory, setSelectedCategory] = useState<number | null>(null);

    const filteredMateriais = materiais.filter((material) => {
        const matchesSearch = material.nome.toLowerCase().includes(searchTerm.toLowerCase()) ||
                            material.descricao.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesCategory = selectedCategory ? material.categoria.id === selectedCategory : true;
        return matchesSearch && matchesCategory;
    });

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Catálogo de Materiais | ExpoMateriais" />

            <div className="p-4">
                <div className="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
                    <div>
                        <h1 className="text-2xl font-bold">Catálogo de Materiais</h1>
                        <p className="text-muted-foreground">Explore e requisite materiais disponíveis</p>
                    </div>

                    {isAdmin && (
                        <Link href="/materiais/create">
                            <Button>Adicionar Material</Button>
                        </Link>
                    )}
                </div>

                <Card className="mb-6 p-4">
                    <div className="flex flex-col gap-4 md:flex-row">
                        <div className="relative flex-grow">
                            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Buscar materiais..."
                                className="pl-9"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                            />
                        </div>
                        <div className="flex flex-wrap gap-2">
                            <Badge
                                variant={selectedCategory === null ? "default" : "outline"}
                                className="cursor-pointer"
                                onClick={() => setSelectedCategory(null)}
                            >
                                Todos
                            </Badge>
                            {categorias.map((categoria) => (
                                <Badge
                                    key={categoria.id}
                                    variant={selectedCategory === categoria.id ? "default" : "outline"}
                                    className="cursor-pointer"
                                    onClick={() => setSelectedCategory(categoria.id)}
                                >
                                    {categoria.nome}
                                </Badge>
                            ))}
                        </div>
                    </div>
                </Card>

                {filteredMateriais.length > 0 ? (
                    <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                        {filteredMateriais.map((material) => (
                            <Card key={material.id} className="overflow-hidden">
                                <div className="relative aspect-video">
                                    <PlaceholderPattern className="absolute inset-0" />
                                    <div className="absolute bottom-2 right-2">
                                        <Badge variant="secondary" className="bg-background/80 backdrop-blur-sm">
                                            {material.categoria.nome}
                                        </Badge>
                                    </div>
                                </div>
                                <div className="p-4">
                                    <h3 className="mb-1 text-lg font-medium">{material.nome}</h3>
                                    <p className="text-muted-foreground mb-3 text-sm line-clamp-2">{material.descricao}</p>
                                    <div className="mb-4 flex items-center gap-2">
                                        <Package className="h-4 w-4" />
                                        <span className="text-sm font-medium">
                                            {material.quantidade_disponivel} unidades disponíveis
                                        </span>
                                    </div>
                                    <div className="flex gap-2">
                                        <Link href={`/materiais/${material.id}`} className="flex-1">
                                            <Button variant="outline" className="w-full">Detalhes</Button>
                                        </Link>
                                        <Link href={`/requisicoes/create?material_id=${material.id}`} className="flex-1">
                                            <Button className="w-full">Requisitar</Button>
                                        </Link>
                                    </div>
                                </div>
                            </Card>
                        ))}
                    </div>
                ) : (
                    <div className="flex flex-col items-center justify-center rounded-lg border border-dashed p-12 text-center">
                        <Package className="mb-2 h-12 w-12 text-muted-foreground" />
                        <h3 className="text-lg font-medium">Nenhum material encontrado</h3>
                        <p className="text-muted-foreground mb-4">Tente ajustar seus filtros de busca.</p>
                        <Button variant="outline" onClick={() => {
                            setSearchTerm('');
                            setSelectedCategory(null);
                        }}>
                            Limpar filtros
                        </Button>
                    </div>
                )}
            </div>
        </AppLayout>
    );
}
```

### 1.2 Detalhe do Material

```tsx
// resources/js/pages/materiais/show.tsx
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { PlaceholderPattern } from '@/components/ui/placeholder-pattern';
import AppLayout from '@/layouts/app-layout';
import { BreadcrumbItem } from '@/types';
import { Head, Link } from '@inertiajs/react';
import { Box, CalendarRange, Edit, FileText, Package, Trash } from 'lucide-react';

interface MaterialShowProps {
    material: {
        id: number;
        nome: string;
        descricao: string;
        quantidade_disponivel: number;
        categoria: {
            id: number;
            nome: string;
        };
        historico_requisicoes: number;
        created_at: string;
        updated_at: string;
    };
    isAdmin: boolean;
}

export default function MaterialShow({ material, isAdmin }: MaterialShowProps) {
    const breadcrumbs: BreadcrumbItem[] = [
        {
            title: 'Dashboard',
            href: '/dashboard',
        },
        {
            title: 'Materiais',
            href: '/materiais',
        },
        {
            title: material.nome,
            href: `/materiais/${material.id}`,
        },
    ];

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title={`${material.nome} | ExpoMateriais`} />

            <div className="p-4">
                <div className="mb-6 flex flex-wrap items-start justify-between gap-4">
                    <div>
                        <h1 className="text-2xl font-bold">{material.nome}</h1>
                        <div className="mt-1">
                            <Badge variant="secondary">{material.categoria.nome}</Badge>
                        </div>
                    </div>

                    <div className="flex gap-2">
                        <Link href={`/requisicoes/create?material_id=${material.id}`}>
                            <Button>Requisitar Material</Button>
                        </Link>

                        {isAdmin && (
                            <>
                                <Link href={`/materiais/${material.id}/edit`}>
                                    <Button variant="outline">
                                        <Edit className="mr-2 h-4 w-4" />
                                        Editar
                                    </Button>
                                </Link>
                                <Link href={`/materiais/${material.id}`} method="delete" as="button">
                                    <Button variant="destructive">
                                        <Trash className="mr-2 h-4 w-4" />
                                        Excluir
                                    </Button>
                                </Link>
                            </>
                        )}
                    </div>
                </div>

                <div className="grid gap-6 md:grid-cols-3">
                    <Card className="md:col-span-2">
                        <div className="relative aspect-video">
                            <PlaceholderPattern className="absolute inset-0" />
                        </div>
                        <div className="p-6">
                            <h2 className="mb-2 text-xl font-semibold">Descrição</h2>
                            <p className="text-muted-foreground whitespace-pre-line">{material.descricao}</p>
                        </div>
                    </Card>

                    <div className="flex flex-col gap-6">
                        <Card className="p-6">
                            <h2 className="mb-4 text-xl font-semibold">Informações</h2>

                            <div className="flex flex-col gap-4">
                                <div className="flex items-center gap-2">
                                    <Box className="h-5 w-5 text-muted-foreground" />
                                    <div>
                                        <p className="text-sm font-medium">Quantidade Disponível</p>
                                        <p className="text-muted-foreground">{material.quantidade_disponivel} unidades</p>
                                    </div>
                                </div>

                                <div className="flex items-center gap-2">
                                    <FileText className="h-5 w-5 text-muted-foreground" />
                                    <div>
                                        <p className="text-sm font-medium">Histórico de Requisições</p>
                                        <p className="text-muted-foreground">{material.historico_requisicoes} requisições</p>
                                    </div>
                                </div>

                                <div className="flex items-center gap-2">
                                    <CalendarRange className="h-5 w-5 text-muted-foreground" />
                                    <div>
                                        <p className="text-sm font-medium">Registro no Sistema</p>
                                        <p className="text-muted-foreground">{new Date(material.created_at).toLocaleDateString('pt-BR')}</p>
                                    </div>
                                </div>
                            </div>
                        </Card>

                        <Card className="p-6">
                            <div className="flex items-center gap-4">
                                <Package className="h-10 w-10 text-primary" />
                                <div>
                                    <h3 className="text-lg font-medium">Precisa deste material?</h3>
                                    <p className="text-muted-foreground text-sm">Faça uma requisição agora mesmo</p>
                                </div>
                            </div>
                            <Link href={`/requisicoes/create?material_id=${material.id}`} className="mt-4 block">
                                <Button className="w-full">Requisitar Material</Button>
                            </Link>
                        </Card>
                    </div>
                </div>
            </div>
        </AppLayout>
    );
}
```

### 1.3 Criar/Editar Material (Admin)

```tsx
// resources/js/pages/materiais/create.tsx (e edit.tsx adaptado)
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import AppLayout from '@/layouts/app-layout';
import { BreadcrumbItem } from '@/types';
import { zodResolver } from '@hookform/resolvers/zod';
import { Head, useForm } from '@inertiajs/react';
import { useState } from 'react';
import { useForm as useHookForm } from 'react-hook-form';
import * as z from 'zod';

interface MaterialCreateProps {
    categorias: {
        id: number;
        nome: string;
    }[];
    material?: {
        id: number;
        nome: string;
        descricao: string;
        quantidade_disponivel: number;
        categoria_id: number;
    };
}

const formSchema = z.object({
    nome: z.string().min(3, { message: 'O nome deve ter pelo menos 3 caracteres' }),
    descricao: z.string().min(10, { message: 'A descrição deve ter pelo menos 10 caracteres' }),
    quantidade_disponivel: z.coerce.number().int().min(0, { message: 'A quantidade não pode ser negativa' }),
    categoria_id: z.coerce.number().int().positive({ message: 'Selecione uma categoria' }),
});

export default function MaterialCreate({ categorias, material }: MaterialCreateProps) {
    const editing = !!material;
    const [isSubmitting, setIsSubmitting] = useState(false);

    const breadcrumbs: BreadcrumbItem[] = [
        { title: 'Dashboard', href: '/dashboard' },
        { title: 'Materiais', href: '/materiais' },
        { title: editing ? 'Editar Material' : 'Novo Material',
          href: editing ? `/materiais/${material.id}/edit` : '/materiais/create' },
    ];

    const form = useHookForm<z.infer<typeof formSchema>>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            nome: material?.nome || '',
            descricao: material?.descricao || '',
            quantidade_disponivel: material?.quantidade_disponivel || 0,
            categoria_id: material?.categoria_id || 0,
        },
    });

    const inertiaForm = useForm({
        nome: material?.nome || '',
        descricao: material?.descricao || '',
        quantidade_disponivel: material?.quantidade_disponivel || 0,
        categoria_id: material?.categoria_id || 0,
    });

    function onSubmit(values: z.infer<typeof formSchema>) {
        setIsSubmitting(true);
        if (editing) {
            inertiaForm.put(`/materiais/${material.id}`, values, {
                onFinish: () => setIsSubmitting(false),
            });
        } else {
            inertiaForm.post('/materiais', values, {
                onFinish: () => setIsSubmitting(false),
            });
        }
    }

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title={`${editing ? 'Editar' : 'Novo'} Material | ExpoMateriais`} />

            <div className="p-4">
                <div className="mb-6">
                    <h1 className="text-2xl font-bold">{editing ? 'Editar Material' : 'Novo Material'}</h1>
                    <p className="text-muted-foreground">
                        {editing ? 'Atualize as informações do material' : 'Cadastre um novo material no sistema'}
                    </p>
                </div>

                <Card className="max-w-3xl p-6">
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                            <FormField
                                control={form.control}
                                name="nome"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Nome do Material</FormLabel>
                                        <FormControl>
                                            <Input placeholder="Ex: Arduino Uno" {...field} />
                                        </FormControl>
                                        <FormDescription>
                                            Nome completo e identificável do material
                                        </FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <FormField
                                control={form.control}
                                name="categoria_id"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Categoria</FormLabel>
                                        <Select
                                            value={field.value.toString()}
                                            onValueChange={field.onChange}
                                        >
                                            <FormControl>
                                                <SelectTrigger>
                                                    <SelectValue placeholder="Selecione uma categoria" />
                                                </SelectTrigger>
                                            </FormControl>
                                            <SelectContent>
                                                {categorias.map((categoria) => (
                                                    <SelectItem
                                                        key={categoria.id}
                                                        value={categoria.id.toString()}
                                                    >
                                                        {categoria.nome}
                                                    </SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <FormField
                                control={form.control}
                                name="descricao"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Descrição</FormLabel>
                                        <FormControl>
                                            <Textarea
                                                placeholder="Descreva detalhes, especificações e informações relevantes do material"
                                                className="min-h-32"
                                                {...field}
                                            />
                                        </FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <FormField
                                control={form.control}
                                name="quantidade_disponivel"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Quantidade Disponível</FormLabel>
                                        <FormControl>
                                            <Input type="number" min="0" {...field} />
                                        </FormControl>
                                        <FormDescription>
                                            Quantas unidades estão disponíveis para requisição
                                        </FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <div className="flex gap-2 pt-4">
                                <Button
                                    type="submit"
                                    disabled={isSubmitting}
                                >
                                    {isSubmitting ? 'Salvando...' : editing ? 'Atualizar Material' : 'Cadastrar Material'}
                                </Button>
                                <Button
                                    type="button"
                                    variant="outline"
                                    onClick={() => window.history.back()}
                                >
                                    Cancelar
                                </Button>
                            </div>
                        </form>
                    </Form>
                </Card>
            </div>
        </AppLayout>
    );
}
```

### 1.4 Lista de Requisições

```tsx
// resources/js/pages/requisicoes/index.tsx
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import AppLayout from '@/layouts/app-layout';
import { BreadcrumbItem } from '@/types';
import { Head, Link } from '@inertiajs/react';
import { format, parseISO } from 'date-fns';
import { pt } from 'date-fns/locale';
import { Check, ChevronDown, Eye, FileQuestion, PlusCircle, Search, X } from 'lucide-react';
import { useState } from 'react';

interface RequisicaoItem {
    id: number;
    material: {
        id: number;
        nome: string;
    };
    quantidade: number;
    finalidade: string;
    created_at: string;
    estado: {
        id: number;
        nome: string;
    };
    projeto: {
        id: number;
        titulo: string;
    };
}

interface RequisicoesIndexProps {
    requisicoes: RequisicaoItem[];
    isAdmin: boolean;
}

const breadcrumbs: BreadcrumbItem[] = [
    {
        title: 'Dashboard',
        href: '/dashboard',
    },
    {
        title: 'Requisições',
        href: '/requisicoes',
    },
];

export default function RequisicoesIndex({ requisicoes, isAdmin }: RequisicoesIndexProps) {
    const [searchTerm, setSearchTerm] = useState('');
    const [statusFilter, setStatusFilter] = useState<string>('all');

    const getStatusBadge = (estadoId: number, estadoNome: string) => {
        switch (estadoId) {
            case 1: // Pendente
                return (
                    <Badge variant="secondary" className="text-yellow-800 dark:text-yellow-300">
                        {estadoNome}
                    </Badge>
                );
            case 2: // Aprovado
                return (
                    <Badge variant="secondary" className="text-green-800 dark:text-green-300">
                        {estadoNome}
                    </Badge>
                );
            case 3: // Rejeitado
                return (
                    <Badge variant="secondary" className="text-red-800 dark:text-red-300">
                        {estadoNome}
                    </Badge>
                );
            default:
                return <Badge variant="outline">{estadoNome}</Badge>;
        }
    };

    const formatDate = (dateString: string) => {
        try {
            return format(parseISO(dateString), 'dd/MM/yyyy', { locale: pt });
        } catch (error) {
            return dateString;
        }
    };

    const filteredRequisicoes = requisicoes.filter((req) => {
        const matchesSearch =
            req.material.nome.toLowerCase().includes(searchTerm.toLowerCase()) ||
            req.finalidade.toLowerCase().includes(searchTerm.toLowerCase()) ||
            req.projeto.titulo.toLowerCase().includes(searchTerm.toLowerCase());

        const matchesStatus =
            statusFilter === 'all' ||
            (statusFilter === 'pending' && req.estado.id === 1) ||
            (statusFilter === 'approved' && req.estado.id === 2) ||
            (statusFilter === 'rejected' && req.estado.id === 3);

        return matchesSearch && matchesStatus;
    });

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Minhas Requisições | ExpoMateriais" />

            <div className="p-4">
                <div className="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
                    <div>
                        <h1 className="text-2xl font-bold">Minhas Requisições</h1>
                        <p className="text-muted-foreground">Gerencie suas requisições de materiais</p>
                    </div>

                    <Link href="/requisicoes/create">
                        <Button>
                            <PlusCircle className="mr-2 h-4 w-4" />
                            Nova Requisição
                        </Button>
                    </Link>
                </div>

                <Card className="mb-6 p-4">
                    <div className="flex flex-col gap-4 md:flex-row">
                        <div className="relative flex-grow">
                            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Buscar requisições..."
                                className="pl-9"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                            />
                        </div>
                        <Select value={statusFilter} onValueChange={setStatusFilter}>
                            <SelectTrigger className="w-full md:w-48">
                                <div className="flex items-center">
                                    <ChevronDown className="mr-2 h-4 w-4" />
                                    <span>Status</span>
                                </div>
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="all">Todos os status</SelectItem>
                                <SelectItem value="pending">Pendentes</SelectItem>
                                <SelectItem value="approved">Aprovadas</SelectItem>
                                <SelectItem value="rejected">Rejeitadas</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                </Card>

                {filteredRequisicoes.length > 0 ? (
                    <Card>
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Material</TableHead>
                                    <TableHead>Quantidade</TableHead>
                                    <TableHead>Finalidade</TableHead>
                                    <TableHead>Projeto</TableHead>
                                    <TableHead>Data</TableHead>
                                    <TableHead>Status</TableHead>
                                    <TableHead className="text-right">Ações</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {filteredRequisicoes.map((requisicao) => (
                                    <TableRow key={requisicao.id}>
                                        <TableCell className="font-medium">{requisicao.material.nome}</TableCell>
                                        <TableCell>{requisicao.quantidade}</TableCell>
                                        <TableCell className="max-w-xs truncate">{requisicao.finalidade}</TableCell>
                                        <TableCell>{requisicao.projeto.titulo}</TableCell>
                                        <TableCell>{formatDate(requisicao.created_at)}</TableCell>
                                        <TableCell>{getStatusBadge(requisicao.estado.id, requisicao.estado.nome)}</TableCell>
                                        <TableCell className="text-right">
                                            <Link href={`/requisicoes/${requisicao.id}`}>
                                                <Button variant="ghost" size="icon">
                                                    <Eye className="h-4 w-4" />
                                                </Button>
                                            </Link>
                                            {isAdmin && requisicao.estado.id === 1 && (
                                                <>
                                                    <Link href={`/requisicoes/${requisicao.id}/aprovar`} method="post" as="button">
                                                        <Button variant="ghost" size="icon" className="text-green-600 hover:text-green-700">
                                                            <Check className="h-4 w-4" />
                                                        </Button>
                                                    </Link>
                                                    <Link href={`/requisicoes/${requisicao.id}/rejeitar`} method="post" as="button">
                                                        <Button variant="ghost" size="icon" className="text-red-600 hover:text-red-700">
                                                            <X className="h-4 w-4" />
                                                        </Button>
                                                    </Link>
                                                </>
                                            )}
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </Card>
                ) : (
                    <div className="flex flex-col items-center justify-center rounded-lg border border-dashed p-12 text-center">
                        <FileQuestion className="mb-2 h-12 w-12 text-muted-foreground" />
                        <h3 className="text-lg font-medium">Nenhuma requisição encontrada</h3>
                        <p className="text-muted-foreground mb-4">Você ainda não fez nenhuma requisição ou nenhuma corresponde aos filtros.</p>
                        <div className="flex gap-2">
                            <Button variant="outline" onClick={() => {
                                setSearchTerm('');
                                setStatusFilter('all');
                            }}>
                                Limpar filtros
                            </Button>
                            <Link href="/requisicoes/create">
                                <Button>
                                    Nova Requisição
                                </Button>
                            </Link>
                        </div>
                    </div>
                )}
            </div>
        </AppLayout>
    );
}
```

### 1.5 Criar Requisição

```tsx
// resources/js/pages/requisicoes/create.tsx
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import AppLayout from '@/layouts/app-layout';
import { BreadcrumbItem } from '@/types';
import { zodResolver } from '@hookform/resolvers/zod';
import { Head, useForm } from '@inertiajs/react';
import { useState } from 'react';
import { useForm as useHookForm } from 'react-hook-form';
import * as z from 'zod';

interface RequisicaoCreateProps {
    materiais: {
